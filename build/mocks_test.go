// Code generated by MockGen. DO NOT EDIT.
// Source: build.go

// Package build_test is a generated GoMock package.
package build_test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockModuleInstaller is a mock of ModuleInstaller interface
type MockModuleInstaller struct {
	ctrl     *gomock.Controller
	recorder *MockModuleInstallerMockRecorder
}

// MockModuleInstallerMockRecorder is the mock recorder for MockModuleInstaller
type MockModuleInstallerMockRecorder struct {
	mock *MockModuleInstaller
}

// NewMockModuleInstaller creates a new mock instance
func NewMockModuleInstaller(ctrl *gomock.Controller) *MockModuleInstaller {
	mock := &MockModuleInstaller{ctrl: ctrl}
	mock.recorder = &MockModuleInstallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModuleInstaller) EXPECT() *MockModuleInstallerMockRecorder {
	return m.recorder
}

// InstallToLayer mocks base method
func (m *MockModuleInstaller) InstallToLayer(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "InstallToLayer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallToLayer indicates an expected call of InstallToLayer
func (mr *MockModuleInstallerMockRecorder) InstallToLayer(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallToLayer", reflect.TypeOf((*MockModuleInstaller)(nil).InstallToLayer), arg0, arg1)
}

// RebuildModules mocks base method
func (m *MockModuleInstaller) RebuildLayer(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "RebuildModules", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RebuildModules indicates an expected call of RebuildModules
func (mr *MockModuleInstallerMockRecorder) RebuildLayer(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebuildModules", reflect.TypeOf((*MockModuleInstaller)(nil).RebuildLayer), arg0, arg1)
}

// CleanAndCopyToDst mocks base method
func (m *MockModuleInstaller) CleanAndCopyToDst(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "CleanAndCopyToDst", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanAndCopyToDst indicates an expected call of CleanAndCopyToDst
func (mr *MockModuleInstallerMockRecorder) CleanAndCopyToDst(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanAndCopyToDst", reflect.TypeOf((*MockModuleInstaller)(nil).CleanAndCopyToDst), arg0, arg1)
}
